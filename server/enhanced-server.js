import express from 'express';
import session from 'express-session';
import axios from 'axios';
import dotenv from 'dotenv';
import cors from 'cors';
import { fileURLToPath } from 'url';
import path from 'path';
import winston from 'winston';
import 'winston-daily-rotate-file';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('=== ENHANCED SERVER STARTING ===');
console.log('Time:', new Date().toISOString());

// „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞Âº∑Âåñ
process.on('uncaughtException', (error) => {
  console.error('‚ùå UNCAUGHT EXCEPTION:', error.name, error.message);
  console.error('Stack:', error.stack);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå UNHANDLED REJECTION at:', promise);
  console.error('Reason:', reason);
  process.exit(1);
});

// Áí∞Â¢ÉÂ§âÊï∞„ÅÆË™≠„ÅøËæº„Åø
console.log('‚úÖ 1. Loading environment variables...');
if (process.env.NODE_ENV === 'production') {
  dotenv.config({ path: '.env.production' });
} else {
  dotenv.config();
  if (!process.env.MONGODB_URI) {
    process.env.DEMO_MODE = 'true';
  }
}

console.log('‚úÖ 2. Environment loaded:', {
  NODE_ENV: process.env.NODE_ENV || 'development',
  DEMO_MODE: process.env.DEMO_MODE === 'true' ? 'ÊúâÂäπ' : 'ÁÑ°Âäπ',
  PORT: process.env.PORT || '4000'
});

// „É≠„Ç¨„Éº„ÅÆÂàùÊúüÂåñ
console.log('‚úÖ 3. Initializing logger...');
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console({
      format: winston.format.simple()
    })
  ]
});

const app = express();
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 4000;

// Âü∫Êú¨„Éü„Éâ„É´„Ç¶„Çß„Ç¢
console.log('‚úÖ 4. Adding basic middleware...');
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// „Çª„ÉÉ„Ç∑„Éß„É≥Ë®≠ÂÆö
app.use(session({
  secret: process.env.SESSION_SECRET || 'your_secret_key',
  resave: false,
  saveUninitialized: true,
  cookie: { 
    secure: process.env.NODE_ENV === 'production', 
    sameSite: 'lax',
    maxAge: 24 * 60 * 60 * 1000
  }
}));

// Âü∫Êú¨„É´„Éº„Éà
console.log('‚úÖ 5. Adding basic routes...');

app.get('/', (req, res) => {
  res.json({
    message: 'Instagram Marketing App Backend API',
    status: 'running',
    version: '1.0.0',
    time: new Date().toISOString(),
    demoMode: process.env.DEMO_MODE === 'true'
  });
});

app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    mongoConnected: false, // „Éá„É¢„É¢„Éº„Éâ
    demoMode: process.env.DEMO_MODE === 'true'
  });
});

app.get('/debug', (req, res) => {
  res.json({
    nodeVersion: process.version,
    platform: process.platform,
    memory: process.memoryUsage(),
    env: {
      NODE_ENV: process.env.NODE_ENV,
      PORT: process.env.PORT,
      DEMO_MODE: process.env.DEMO_MODE
    }
  });
});

// Ë™çË®º„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
app.post('/api/auth/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    
    if (!email || !password) {
      return res.status(400).json({
        success: false,
        error: '„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Å®„Éë„Çπ„ÉØ„Éº„Éâ„ÅØÂøÖÈ†à„Åß„Åô'
      });
    }
    
    // „Éá„É¢Áî®„ÅÆÁ∞°ÊòìË™çË®º
    if (email === 'demo@example.com' && password === 'password123') {
      res.json({
        success: true,
        message: '„É≠„Ç∞„Ç§„É≥„Å´ÊàêÂäü„Åó„Åæ„Åó„Åü',
        user: {
          id: 'demo-user-1',
          email: email,
          username: 'demo_user'
        },
        token: 'demo-token-123'
      });
    } else {
      res.status(401).json({
        success: false,
        error: '„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Åæ„Åü„ÅØ„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì'
      });
    }
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({
      success: false,
      error: '„É≠„Ç∞„Ç§„É≥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
    });
  }
});

// Instagram API „Ç®„É≥„Éâ„Éù„Ç§„É≥„ÉàÔºà„Éá„É¢„É¢„Éº„ÉâÔºâ
app.get('/api/instagram/me', async (req, res) => {
  const { access_token } = req.query;
  
  if (!access_token) {
    return res.status(400).json({ error: 'access_token is required' });
  }
  
  // „Éá„É¢„É¶„Éº„Ç∂„Éº„ÅÆÂ†¥Âêà„ÅØ„ÉÄ„Éü„Éº„Éá„Éº„Çø„ÇíËøî„Åô
  if (access_token === 'demo_token' || process.env.DEMO_MODE === 'true') {
    console.log('üé≠ [DEBUG] „Éá„É¢„É¶„Éº„Ç∂„ÉºÁî®„ÉÄ„Éü„Éº„Éá„Éº„Çø„ÇíËøîÂç¥');
    return res.json({
      id: 'demo_user_id',
      username: 'demo_user',
      account_type: 'PERSONAL',
      media_count: 1
    });
  }
  
  // ÂÆüÈöõ„ÅÆInstagram APIÂëº„Å≥Âá∫„Åó
  try {
    const url = `https://graph.instagram.com/v18.0/me?fields=id,username,account_type,media_count&access_token=${access_token}`;
    const response = await axios.get(url);
    res.json(response.data);
  } catch (err) {
    res.status(500).json({ error: 'Failed to fetch from Instagram API' });
  }
});

// AIÊäïÁ®øÁîüÊàê„Ç®„É≥„Éâ„Éù„Ç§„É≥„ÉàÔºà„Éá„É¢„É¢„Éº„ÉâÔºâ
app.post('/api/ai/generate-post', async (req, res) => {
  try {
    const { prompt, platform = 'instagram' } = req.body;
    
    if (!prompt) {
      return res.status(400).json({
        success: false,
        error: '„Éó„É≠„É≥„Éó„Éà„ÅØÂøÖÈ†à„Åß„Åô'
      });
    }
    
    // „Éá„É¢„É¢„Éº„Éâ„ÅÆÂ†¥Âêà„ÅØ„ÉÄ„Éü„Éº„Éá„Éº„Çø„ÇíËøî„Åô
    if (process.env.DEMO_MODE === 'true') {
      const demoPost = {
        id: `demo_post_${Date.now()}`,
        content: `üéØ ${prompt}„Å´Èñ¢„Åô„ÇãÊäïÁ®ø\n\n‚ú® „Åì„Çå„ÅØ„Éá„É¢„É¢„Éº„Éâ„Åß„ÅÆÁîüÊàêÁµêÊûú„Åß„Åô„ÄÇ\n\n#„Éá„É¢ #AIÁîüÊàê #${platform}`,
        hashtags: ['#„Éá„É¢', '#AIÁîüÊàê', `#${platform}`],
        estimatedEngagement: Math.floor(Math.random() * 50) + 20,
        platform: platform,
        createdAt: new Date().toISOString()
      };
      
      return res.json({
        success: true,
        data: demoPost,
        message: '„Éá„É¢„É¢„Éº„Éâ: AIÊäïÁ®øÁîüÊàê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü'
      });
    }
    
    // ÂÆüÈöõ„ÅÆAIÁîüÊàêÂá¶ÁêÜÔºàÂ∞ÜÊù•ÁöÑ„Å´ÂÆüË£ÖÔºâ
    res.status(501).json({
      success: false,
      error: 'AIÁîüÊàêÊ©üËÉΩ„ÅØÁèæÂú®ÈñãÁô∫‰∏≠„Åß„Åô'
    });
    
  } catch (error) {
    console.error('AI post generation error:', error);
    res.status(500).json({
      success: false,
      error: 'AIÊäïÁ®øÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
    });
  }
});

// ÊäïÁ®øÂàÜÊûê„Ç®„É≥„Éâ„Éù„Ç§„É≥„ÉàÔºà„Éá„É¢„É¢„Éº„ÉâÔºâ
app.post('/api/analytics/post-analysis', async (req, res) => {
  try {
    const { postId, content } = req.body;
    
    if (!content) {
      return res.status(400).json({
        success: false,
        error: 'ÊäïÁ®øÂÜÖÂÆπ„ÅØÂøÖÈ†à„Åß„Åô'
      });
    }
    
    // „Éá„É¢„É¢„Éº„Éâ„ÅÆÂ†¥Âêà„ÅØ„ÉÄ„Éü„Éº„Éá„Éº„Çø„ÇíËøî„Åô
    if (process.env.DEMO_MODE === 'true') {
      const demoAnalysis = {
        postId: postId || `demo_${Date.now()}`,
        engagementScore: Math.floor(Math.random() * 100) + 50,
        reachEstimate: Math.floor(Math.random() * 10000) + 1000,
        hashtagEffectiveness: Math.floor(Math.random() * 100) + 60,
        optimalPostingTime: '19:00-21:00',
        recommendations: [
          '„Éè„ÉÉ„Ç∑„É•„Çø„Ç∞„Çí3-5ÂÄã„Å´ÊúÄÈÅ©Âåñ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
          'ÊäïÁ®øÊôÇÈñì„Çí19:00-21:00„Å´Â§âÊõ¥„Åô„Çã„Åì„Å®„Çí„ÅäÂãß„ÇÅ„Åó„Åæ„Åô',
          'ÁîªÂÉè„Å®„Ç≠„É£„Éó„Ç∑„Éß„É≥„ÅÆ‰∏ÄË≤´ÊÄß„Çí‰øù„Å°„Åæ„Åó„Çá„ÅÜ'
        ],
        createdAt: new Date().toISOString()
      };
      
      return res.json({
        success: true,
        data: demoAnalysis,
        message: '„Éá„É¢„É¢„Éº„Éâ: ÊäïÁ®øÂàÜÊûê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü'
      });
    }
    
    // ÂÆüÈöõ„ÅÆÂàÜÊûêÂá¶ÁêÜÔºàÂ∞ÜÊù•ÁöÑ„Å´ÂÆüË£ÖÔºâ
    res.status(501).json({
      success: false,
      error: 'ÂàÜÊûêÊ©üËÉΩ„ÅØÁèæÂú®ÈñãÁô∫‰∏≠„Åß„Åô'
    });
    
  } catch (error) {
    console.error('Post analysis error:', error);
    res.status(500).json({
      success: false,
      error: 'ÊäïÁ®øÂàÜÊûê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
    });
  }
});

// „Çµ„Éº„Éê„ÉºËµ∑Âãï
console.log('‚úÖ 6. Starting server...');

const server = app.listen(DEFAULT_PORT, () => {
  console.log('üöÄ ENHANCED SERVER STARTED SUCCESSFULLY!');
  console.log(`üì° Server running on port ${DEFAULT_PORT}`);
  console.log(`üîó Health: http://localhost:${DEFAULT_PORT}/health`);
  console.log(`üîç Debug: http://localhost:${DEFAULT_PORT}/debug`);
  console.log('üéØ Demo mode:', process.env.DEMO_MODE === 'true' ? 'Enabled' : 'Disabled');
  console.log('üîß Environment:', process.env.NODE_ENV || 'development');
});

server.on('error', (error) => {
  console.error('‚ùå SERVER ERROR:', error.message);
  if (error.code === 'EADDRINUSE') {
    console.error(`‚ùå Port ${DEFAULT_PORT} is already in use`);
  }
});

console.log('‚úÖ 7. Setup complete - waiting for connections...');
