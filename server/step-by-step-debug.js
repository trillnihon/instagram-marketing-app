import express from 'express';
import cors from 'cors';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import http from 'http';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

console.log('=== STEP-BY-STEP DEBUG SERVER ===');
console.log('Time:', new Date().toISOString());

const app = express();
const PORT = 4000;

// „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞Âº∑Âåñ
process.on('uncaughtException', (error) => {
  console.log('‚ùå UNCAUGHT EXCEPTION:', error.name, error.message);
  console.log('Stack:', error.stack);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.log('‚ùå UNHANDLED REJECTION at:', promise);
  console.log('Reason:', reason);
  process.exit(1);
});

// ÊÆµÈöé1: Âü∫Êú¨„Éü„Éâ„É´„Ç¶„Çß„Ç¢
console.log('‚úÖ STEP 1: Adding basic middleware...');
app.use(cors());
app.use(express.json());

// ÊÆµÈöé2: Áí∞Â¢ÉÂ§âÊï∞Ë™≠„ÅøËæº„Åø„ÉÜ„Çπ„Éà
console.log('‚úÖ STEP 2: Testing environment variables...');
try {
  import('dotenv').then(dotenv => {
    dotenv.default.config();
    console.log('‚úÖ dotenv loaded successfully');
    console.log('NODE_ENV:', process.env.NODE_ENV || 'undefined');
    console.log('PORT:', process.env.PORT || 'undefined');
  }).catch(err => {
    console.log('‚ö†Ô∏è dotenv not available:', err.message);
  });
} catch (error) {
  console.log('‚ö†Ô∏è dotenv import failed:', error.message);
}

// ÊÆµÈöé3: „É´„Éº„ÉàËøΩÂä†
console.log('‚úÖ STEP 3: Adding routes...');

app.get('/health', (req, res) => {
  console.log('üì° Health check requested');
  res.json({ 
    status: 'OK', 
    time: new Date().toISOString(),
    uptime: process.uptime(),
    step: 'step-by-step-debug'
  });
});

app.get('/test-imports', async (req, res) => {
  console.log('üîç Testing imports...');
  const results = {};
  
  // „ÉÜ„Çπ„Éà„Åô„Çã„É¢„Ç∏„É•„Éº„É´‰∏ÄË¶ß
  const modules = [
    'winston',
    'winston-daily-rotate-file',
    'detect-port',
    'express-session',
    'axios',
    'openai',
    'stripe',
    'uuid',
    'mongoose'
  ];
  
  for (const moduleName of modules) {
    try {
      const module = await import(moduleName);
      results[moduleName] = '‚úÖ OK';
    } catch (error) {
      results[moduleName] = `‚ùå FAILED: ${error.message}`;
    }
  }
  
  res.json({
    success: true,
    imports: results,
    message: 'Import test completed'
  });
});

// ÊÆµÈöé4: „Çµ„Éº„Éê„ÉºËµ∑Âãï
console.log('‚úÖ STEP 4: Starting server...');

const server = app.listen(PORT, () => {
  console.log('üöÄ STEP-BY-STEP SERVER STARTED SUCCESSFULLY!');
  console.log(`üì° Server running on port ${PORT}`);
  console.log(`üîó Health: http://localhost:${PORT}/health`);
  console.log(`üîç Import Test: http://localhost:${PORT}/test-imports`);
  
  // Ëá™Â∑±„ÉÜ„Çπ„Éà
  setTimeout(() => {
    console.log('üß™ Self-test in 3 seconds...');
    const req = http.get(`http://localhost:${PORT}/health`, (res) => {
      console.log('‚úÖ Self-test PASSED - Server is responsive');
    });
    req.on('error', (err) => {
      console.log('‚ùå Self-test FAILED:', err.message);
    });
  }, 3000);
});

server.on('error', (error) => {
  console.log('‚ùå SERVER ERROR:', error.message);
  if (error.code === 'EADDRINUSE') {
    console.log(`‚ùå Port ${PORT} is already in use`);
  }
});

console.log('‚úÖ STEP 5: Setup complete - waiting for connections...');
